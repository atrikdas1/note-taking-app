# Choosing this as the docker image because:
# 1. One of the best performances among the python docker images 
# 2. Small image size, only beaten by alpine images
# 3. Contains latest python bugfixes
# 4. Most stable (bullseye still under development)
# Reference: https://pythonspeed.com/articles/base-image-python-docker-images/
FROM python:3.9-slim-buster

# Change this in production env
ENV FLASK_DEBUG=1

# Add timezone information later used to see when entries were modified in the database
ARG timezone
ENV TZ=${timezone}

RUN apt-get install -y tzdata && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install any underlying binaries and clean up artifacts to minimize image size
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && pip3 install --upgrade pip

# Use as work directory
WORKDIR /home/apps

# Point the python path to the working directory
ENV PYTHONPATH /home/apps

# Copy requirements first to use smart layer caching and speed up build process
COPY requirements/requirements.txt /

# Only update these when there are new dependencies to install
RUN python3.9 -m pip install --no-cache-dir --upgrade \
    pip \
    setuptools \
    wheel

# Finally install the dependencies, the --no-cache-dir flag saves image space
RUN python3.9 -m pip install --no-cache-dir \
    -r /requirements.txt

# Copy the source code to the container
COPY shell-scripts/wait-for-pg.sh /
COPY apps /home/apps

# Public facing port
EXPOSE 9700

# Allow execution of shell scripts
RUN chmod +x /wait-for-pg.sh

# Run pytest coverage which runs every function appended with test_
CMD sh -c "/wait-for-pg.sh && cd /home/apps; coverage run -m pytest -x -rA"
